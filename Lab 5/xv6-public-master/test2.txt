
\ing process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.
Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.
Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.
Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.
Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.
Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.
Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.
Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.

Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.


Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.




Lecture Notes for CS347: Operating Systems
Mythili Vutukuru, Department of Computer Science and Engineering, IIT Bombay

3. Process Management in xv6We begin understanding xv6 process management by looking at the proc data structure (line
2353), that corresponds to the PCB. Especially note the fields corresponding to the kernel stack
pointer, the trap frame (which stores context before handling a trap), and the context structure (which
stores context during a context switch). We will now walk through some of the paths in the code:
interrupt handling (sheets 32–34), new process creation using fork (sheets 24–25), and the workings
of the first init and shell processes (sheets 24–25, sheets 83–88).
3.0: Review of x86 architecture
•The architecture of the underlying CPU defines the instructions and registers available during
process execution. Details of the CPU architecture are useful in understanding the architecture-
dependent parts of an OS. We will review the basics here.
•Several CPU registers are referenced in the discussion of operating system concepts. While the
names and number of registers differ based on the CPU architecture, here are some names of
x86 registers that we will find useful. (Note: this list of registers is by no means exhaustive.)

1. EAX, EBX, ECX, EDX, ESI, and EDI are general purpose registers used to store variables
during computations.
2. The general purpose registers EBP and ESP store the base and top of the current stack
frame.

3. The program counter (PC) is also referred to as EIP (instruction pointer).
4. The segment registers CS, DS, ES, FS, GS, and SS store pointers to various segments
(e.g., code segment, data segment, stack segment) of the process memory.
5. The control registers like CR0 hold control information. For example, the CR3 register

holds the address of the page table of the current running process, which is used to translate
virtual addresses to physical addresses.
•Of these registers, EAX, ECX, and EDX are called caller-save registers, and the rest (EBX,
ESI, EDI, ESP, EBP, EIP) are callee-save registers. The callee-save registers must be preserved
across function calls and context switches. Suppose an executing process pushes a new stack
frame onto a stack during a function call, or the CPU moves away to another process. When the
function call returns, or the CPU is switched back to the process, the callee-save registers must
have the same values as before the event. The ESP register should be pointing to the old stack
as before, and EIP should contain the return address from where the process resumes execution.
The EAX register is used to pass arguments and return values. The caller save registers may
have changed, and no assumptions would be made of them. This convention is followed by
compilers and operating systems.
